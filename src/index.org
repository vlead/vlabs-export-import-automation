#+TITLE: Vlabs Export Import Automation
#+AUTHOR: VLEAD
#+DATE: [2017-05-03 Wednesday]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate


* Introduction 
  This document describes how to export and import the vlabs
  from openedx platform automatically.

* Procedure
** Export Lab
*** Python Test Case to Export Lab
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
from selenium.webdriver import ActionChains

import unittest, time, re

class ExportLab(unittest.TestCase):
#+END_SRC

    A =setUp()= method works as an entry point for the test
cases. We can use it to run a fixed set of actions before
executing a test or all the tests defined in the class.

These are pre-requisites which may include the following
test setup preparation tasks.

Create an instance of a browser driver.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
    def setUp(self):
        self.caps = webdriver.DesiredCapabilities.FIREFOX
        self.caps["marionette"] = False
        self.driver = webdriver.Firefox(capabilities=self.caps)

#+END_SRC 
Set up browser preferences.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
        profile = webdriver.FirefoxProfile()
        profile.set_preference('browser.download.folderList', 1)
        profile.set_preference('browser.download.manager.showWhenStarting', False)
        profile.set_preference('browser.download.dir', '/home/sravanthi/projects/')
        profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/x-gzip')
        profile.set_preference('browser.download.manager.showWhenStarting', False)
#+END_SRC
Navigate to a base URL.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
        self.driver = webdriver.Firefox(firefox_profile=profile)
        self.driver.implicitly_wait(30)
        self.base_url = "http://mybox.vlabs.ac.in:18010"
        self.verificationErrors = []
        self.accept_next_alert = True
#+END_SRC
After creating a setUp() method, we can now write some tests
to verify the application's functionality. 
*Use Case* 
1. Visit the base url mentioned in setup
2. Logout from the site if already logged in
3. Login to the site
4. Enter username and password
5. Click on submit
6. Visit the lab by accessing the url from =lab-info.json= file
7. Click on export option from the drop down menu
8. Click on =Export= button
9. Click on =Export Course Content= button
10. Finally save the file to the disk.
11. Rename the file with lab name mentioned in =lab-info.json=
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
    def test_export_lab(self):
        driver = self.driver
        driver.maximize_window()
        driver.get(self.base_url + "/logout")
        driver.get(self.base_url + "/signin")
        driver.find_element_by_id("email").clear()
        driver.find_element_by_id("email").send_keys("honor@example.com")
        driver.find_element_by_id("password").clear()
        driver.find_element_by_id("password").send_keys("edx")
        driver.find_element_by_xpath("//button[@type='submit']").click()

        driver.get(self.base_url + "/home/")
        with open('lab-info.json') as data_file:    
             data = json.load(data_file)
             driver.get(self.base_url + data[0]['url'])
#        driver.find_element_by_xpath("//div[@id='content']/div[2]/section/article/div[3]/ul/li[31]/a/h3").click()
        driver.find_element_by_xpath("//div[@id='view-top']/header/div/nav/ol/li[3]/h3/span[2]").click()
        driver.find_element_by_link_text("Export").click()
        time.sleep(2)
        driver.find_element_by_link_text("Export Course Content").click()
        time.sleep(2)
        actionChains = ActionChains(driver)
        actionChains.context_click(driver.find_element_by_link_text("Download Exported Course")).perform()
#        webdriver.ActionChains(self.driver).move_to_element('Save Link As...').context_click('Save Link As...').perform()
#        actionChains.context.browser.move_to_element('Save Link As...').context_click('Save Link As...').perform()

        time.sleep(10)

    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException as e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException as e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
#+END_SRC
Once the test execution finishes, the pre-requisites
specified in the setUp() method have to be cleaned up.

So to achieve this, the base TestCase class provides another
method i.e. tearDown() which the runner calls after test
execution. It lets us clean the values initialized at the
beginning of test via setUp() method.

In our example, when the test execution ends, we no longer
need the instance of Firefox. So we will close it in the
tearDown() method, as shown in the following code.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)
#+END_SRC

Running the tests from the command line would require us to
add a call to the main() method in the test script.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
if __name__ == "__main__":
    unittest.main()

#+END_SRC
** Import Lab
*** Python Test Case to Import Lab
#+BEGIN_SRC python :tangle tests/test_import_lab.py 
# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re
import json
import urllib

class ImportLab(unittest.TestCase):

    def setUp(self):
        self.caps = webdriver.DesiredCapabilities.FIREFOX
        self.caps["marionette"] = False
        self.driver = webdriver.Firefox(capabilities=self.caps)
        self.driver.implicitly_wait(30)
        self.base_url = "http://mybox.vlabs.ac.in:18010"
        self.verificationErrors = []
        self.accept_next_alert = True

    def test_import_lab(self):
        driver = self.driver
        driver.maximize_window()
        driver.get(self.base_url + "/logout")
        driver.get(self.base_url + "/signin")
        driver.find_element_by_id("email").clear()
        driver.find_element_by_id("email").send_keys("honor@example.com")
        driver.find_element_by_id("password").clear()
        driver.find_element_by_id("password").send_keys("edx")
        driver.find_element_by_xpath("//button[@type='submit']").click()

        driver.get(self.base_url + "/home/")
        with open('lab-info.json') as data_file:    
             data = json.load(data_file)
             driver.get(self.base_url + data[0]['url'])
#        driver.find_element_by_xpath("//div[@id='content']/div[2]/section/article/div[3]/ul/li[31]/a/h3").click()
        driver.find_element_by_xpath("//div[@id='view-top']/header/div/nav/ol/li[3]/h3/span[1]").click()
        driver.find_element_by_link_text("Import").click()
        time.sleep(10)
        with open('lab-info.json') as data_file:    
             data = json.load(data_file)
             driver.find_element_by_css_selector("input[type=file]").send_keys(data[0]['tar_file_location'])
        time.sleep(10)
        driver.find_element_by_id("replace-courselike-button").click()
        driver.find_element_by_id("view-updated-button").click()

    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException as e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException as e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()

#+END_SRC
    
*** Lab sepecification
#+BEGIN_SRC json :tangle tests/lab-info.json 
[{"lab_name":"Fab Laboratory", "url":"/course/course-v1:Virtual-Labs+cse30+Anytime", "tar_file_location":"/home/virtual-labs/projects/open-edx-FAB-laboratory-coep.tar.gz"}]
#+END_SRC 
