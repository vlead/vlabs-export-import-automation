#+TITLE: Vlabs Export Import Automation
#+AUTHOR: VLEAD
#+DATE: [2017-05-03 Wednesday]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate


* Introduction 
  This document describes how to export and import the vlabs
  from openedx platform automatically.

* Export Lab
** Python Test Case to Export Lab
    A =setUp()= method works as an entry point for the test
cases. We can use it to run a fixed set of actions before
executing a test or all the tests defined in the class.

These are pre-requisites which may include the following
test setup preparation tasks.

Create an instance of a browser driver.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
from selenium.webdriver import ActionChains

from git import Repo
from config import data
import unittest, time, re
import json, os, sys

class ExportLab(unittest.TestCase):

    def setUp(self):
        self.caps = webdriver.DesiredCapabilities.FIREFOX
        self.caps["marionette"] = False
        self.driver = webdriver.Firefox(capabilities=self.caps)

#+END_SRC 
Set up browser preferences.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
        profile = webdriver.FirefoxProfile()
        profile.set_preference('browser.download.folderList', 1)
        profile.set_preference('browser.download.manager.showWhenStarting', False)
        profile.set_preference("browser.download.manager.showAlertOnComplete", False)
        profile.set_preference('browser.download.dir', '/home/sravanthi/projects/')
        profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/x-tgz')
        profile.set_preference('browser.download.manager.showWhenStarting', False)
        profile.set_preference("browser.download.panel.shown", False);
 
#+END_SRC
Navigate to a base URL.Initialize the variables with config values
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
        self.driver = webdriver.Firefox(capabilities=self.caps, firefox_profile=profile)
        self.driver.implicitly_wait(30)
        self.verificationErrors = []
        self.accept_next_alert = True

        with open('lab-info.json') as data_file:    
             self.data = json.load(data_file) 
        self.base_url = data['base_url']
        self.lab_name = data['lab_name']
        self.tag_name = data['tag_name']
        self.lab_name = data['lab_name']
        self.path = data['directory_path_to_download']
        self.git_url = data['git_url']
        self.proxy = data['proxy']

#+END_SRC
After creating a setUp() method, we can now write some tests
to verify the application's functionality. 
*Use Case* 
1. Visit the base url mentioned in setup
2. Logout from the site if already logged in
3. Login to the site
4. Enter username and password
5. Click on submit
6. Visit the lab by accessing the url from =lab-info.json= file
7. Click on export option from the drop down menu
8. Click on =Export= button
9. Click on =Export Course Content= button
10. Finally save the file to the disk.
11. Rename the file with lab name mentioned in =lab-info.json=
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
    def test_export_lab(self):
        driver = self.driver
        driver.maximize_window()
        driver.get(self.base_url + "/logout")
        driver.get(self.base_url + "/signin")
        driver.find_element_by_id("email").clear()
        driver.find_element_by_id("email").send_keys("honor@example.com")
        driver.find_element_by_id("password").clear()
        driver.find_element_by_id("password").send_keys("edx")
        driver.find_element_by_xpath("//button[@type='submit']").click()

        driver.get(self.base_url + "/home/")

        driver.get(self.base_url + self.data['lab_url'])
#        driver.find_element_by_xpath("//div[@id='content']/div[2]/section/article/div[3]/ul/li[31]/a/h3").click()
        driver.find_element_by_xpath("//div[@id='view-top']/header/div/nav/ol/li[3]/h3/span[2]").click()
        driver.find_element_by_link_text("Export").click()        
        time.sleep(2)
        driver.find_element_by_link_text("Export Course Content").click()
        time.sleep(2)
        driver.find_element_by_link_text("Download Exported Course").click()
        time.sleep(10)
        rename_lab_folder(self)
        untar_lab_folder(self)
        git_clone_repo(self)
        git_tag_repo(self)
        copy_files_to_git_repo(self)
        push_updated_files_to_git_repo(self)

#+END_SRC
Once the test execution finishes, the pre-requisites
specified in the setUp() method have to be cleaned up.

So to achieve this, the base TestCase class provides another
method i.e. tearDown() which the runner calls after test
execution. It lets us clean the values initialized at the
beginning of test via setUp() method.

In our example, when the test execution ends, we no longer
need the instance of Firefox. So we will close it in the
=tearDown()= method, as shown in the following code.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
def rename_lab_folder(self):
    print "============rename exported edx lab folder=========" 
    new_lab_name=self.lab_name+'-edx'+'.tar.gz'
    for file in os.listdir(self.path):
        if file.endswith(".tar.gz"):
            os.rename(os.path.join(self.path, file), os.path.join(self.path, new_lab_name))
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
def untar_lab_folder(self):
    print "===========untar files from edx lab folder==========="
    for file in os.listdir(self.path):
        if file.endswith(".tar.gz"):
           print file
           os.chdir(self.path)
           os.system("tar -xvf " + file)
           new_folder = file.split('.')[0]
           os.system("mv course/ " + new_folder)
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
def git_clone_repo(self):
    # setup proxy settings to install any package     
    os.environ["HTTP_PROXY"] = self.proxy
    os.environ["HTTPS_PROXY"] = self.proxy

    clone = "git clone "+ self.git_url

    os.chdir(self.path) # Specifying the path where the cloned project has to be copied
    os.system(clone) # Cloning
    print "\n LAB %s CLONED SUCCESSFULLY.! \n" %self.lab_name
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
def git_tag_repo(self):
    obj = Repo(self.lab_name)
    os.chdir(self.path) # Specifying the path where the cloned project has to be copied
    obj.create_tag(self.tag_name)
    obj.remotes.origin.push(self.tag_name)
    print "git tag with version %s pushed successfully" %self.tag_name
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
def copy_files_to_git_repo(self):
    dest_dir = self.path + '/' + self.lab_name

    os.chdir(dest_dir)
    os.system('git rm -rf *')
    print "removed old files successfully...."

    src_dir = dest_dir + '-edx' + '/*'
    os.system('cp -rf '+ src_dir+" " + dest_dir)
    print "copied new files to lab dir successfully..."
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
def push_updated_files_to_git_repo(self):
    # setup proxy settings to install any package     
    os.environ["HTTP_PROXY"] = self.proxy
    os.environ["HTTPS_PROXY"] = self.proxy

    dest_dir = self.path + '/' + self.lab_name
    os.chdir(dest_dir)
    os.system('git status')
    os.system('git add .')
    os.system('git commit -m "updated new files"')
    os.system ('git push origin master')
    print "updated sources pushed to github lab repo successfully..."

#+END_SRC

Running the tests from the command line would require us to
add a call to the main() method in the test script.
#+BEGIN_SRC python :tangle tests/test_export_lab.py 
if __name__ == "__main__":
    unittest.main()

#+END_SRC
* Import Lab
** Python Test Case to Import Lab
    A =setUp()= method works as an entry point for the test
cases. We can use it to run a fixed set of actions before
executing a test or all the tests defined in the class.

These are pre-requisites which may include the following
test setup preparation tasks.

Create an instance of a browser driver.
#+BEGIN_SRC python :tangle tests/test_import_lab.py 
# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re
import json
import urllib

class ImportLab(unittest.TestCase):

    def setUp(self):
        self.caps = webdriver.DesiredCapabilities.FIREFOX
        self.caps["marionette"] = False
        self.driver = webdriver.Firefox(capabilities=self.caps)
        self.driver.implicitly_wait(30)
        self.base_url = "http://mybox.vlabs.ac.in:18010"
        self.verificationErrors = []
        self.accept_next_alert = True
        with open('lab-info.json') as data_file:    
             self.data = json.load(data_file)

#+END_SRC
After creating a setUp() method, we can now write some tests
to verify the application's functionality. 
*Use Case* 
1. Visit the base url mentioned in setup
2. Logout from the site if already logged in
3. Login to the site
4. Enter username and password
5. Click on submit
6. Visit the lab by accessing the url from =lab-info.json= file
7. Click on import option from the drop down menu
8. Click on =Import= button
9. Click on =Choose a file to import= button
10. Select the compressed sources of the lab by accessing the
    =tar_file_location= value from =lab-info.json= file
11. Click on =Replace my course with selected file= button
12. Click on =View Updated outline= button
#+BEGIN_SRC python :tangle tests/test_import_lab.py 
    def test_import_lab(self):
        driver = self.driver
        driver.maximize_window()
        driver.get(self.base_url + "/logout")
        driver.get(self.base_url + "/signin")
        driver.find_element_by_id("email").clear()
        driver.find_element_by_id("email").send_keys("honor@example.com")
        driver.find_element_by_id("password").clear()
        driver.find_element_by_id("password").send_keys("edx")
        driver.find_element_by_xpath("//button[@type='submit']").click()

        driver.get(self.base_url + "/home/")
        lab_url = self.data['lab_url']
        driver.get(self.base_url + lab_url)
#        driver.find_element_by_xpath("//div[@id='content']/div[2]/section/article/div[3]/ul/li[31]/a/h3").click()
        driver.find_element_by_xpath("//div[@id='view-top']/header/div/nav/ol/li[3]/h3/span[1]").click()
        driver.find_element_by_link_text("Import").click()
        time.sleep(10)
        driver.find_element_by_css_selector("input[type=file]").send_keys(self.data['directory_path_to_upload'])
        time.sleep(10)
        driver.find_element_by_id("replace-courselike-button").click()
        driver.find_element_by_id("view-updated-button").click()

#    def is_element_present(self, how, what):
#        try: self.driver.find_element(by=how, value=what)
#        except NoSuchElementException as e: return False
#        return True
#    
#    def is_alert_present(self):
#        try: self.driver.switch_to_alert()
#        except NoAlertPresentException as e: return False
#        return True
#    
#    def close_alert_and_get_its_text(self):
#        try:
#            alert = self.driver.switch_to_alert()
#            alert_text = alert.text
#            if self.accept_next_alert:
#                alert.accept()
#            else:
#                alert.dismiss()
#            return alert_text
#        finally: self.accept_next_alert = True
#+END_SRC
Once the test execution finishes, the pre-requisites
specified in the setUp() method have to be cleaned up.

So to achieve this, the base TestCase class provides another
method i.e. tearDown() which the runner calls after test
execution. It lets us clean the values initialized at the
beginning of test via setUp() method.

In our example, when the test execution ends, we no longer
need the instance of Firefox. So we will close it in the
=tearDown()= method, as shown in the following code.

#+BEGIN_SRC python :tangle tests/test_import_lab.py     
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)
#+END_SRC
Running the tests from the command line would require us to
add a call to the main() method in the test script.

#+BEGIN_SRC python :tangle tests/test_import_lab.py 
if __name__ == "__main__":
    unittest.main()

#+END_SRC
    
* Config
#+BEGIN_SRC json :tangle tests/config.py 
data={
"lab_name":"open-edx-FAB-laboratory-coep", 
"directory_path_to_download":"/home/virtual-labs/Downloads",
"lab_url":"/course/course-v1:Virtual-Labs+cse30+Anytime", 
"directory_path_to_upload":"/home/virtual-labs/projects/open-edx-FAB-laboratory-coep.tar.gz",
"git_url":"https://github.com/madhavipuliraju/open-edx-FAB-laboratory-coep.git",
"tag_name":"v4.6.0",
"proxy":"http://proxy.iiit.ac.in:8080",
"base_url":"http://mybox.vlabs.ac.in:18010"
}

#+END_SRC

* test code
#+BEGIN_SRC 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
from selenium.webdriver import ActionChains
from ddt import ddt, file_data, data
from git import Repo
from config import data
import unittest, time, re
import json, os, sys

l = [{"lab_name":"open-edx-FAB-laboratory-coep", 
"lab_id":"foo",
"directory_path_to_download":"/home/virtual-labs/Downloads",
"lab_url":"/course/course-v1:Virtual-Labs+cse30+Anytime", 
"directory_path_to_upload":"/home/virtual-labs/projects/open-edx-FAB-laboratory-coep.tar.gz",
"git_url":"https://github.com/madhavipuliraju/open-edx-FAB-laboratory-coep-edx.git",
"tag_name":"v5.0.0",
"proxy":"http://proxy.iiit.ac.in:8080",
"base_url":"http://mybox.vlabs.ac.in:18010"
},
{"lab_name":"bar-lab", 
"lab_url":"/course/course-v1:Virtual-Labs+civil24+Anytime", 
"directory_path_to_download":"/home/virtual-labs/Downloads",
"lab_id":"bar"}, 
{"lab_name":"lee-lab", 
"lab_url":"/course/course-v1:Virtual-Labs+civil21+Anytime", 
"directory_path_to_download":"/home/virtual-labs/Downloads",
"lab_id":"lee"}]

class TestExportLab(type):

    def __new__(mcs, name, bases, dict):
        def gen_test(lab_name, lab_url, path):
            def test_export_lab(self):
                driver = self.driver
                driver.maximize_window()
                driver.get(self.base_url + "/logout")
                driver.get(self.base_url + "/signin")
                driver.find_element_by_id("email").clear()
                driver.find_element_by_id("email").send_keys("honor@example.com")
                driver.find_element_by_id("password").clear()
                driver.find_element_by_id("password").send_keys("edx")
                driver.find_element_by_xpath("//button[@type='submit']").click()
#                driver.get(self.base_url + "/home/")
                driver.get(self.base_url + lab_url)
                driver.find_element_by_xpath("//div[@id='view-top']/header/div/nav/ol/li[3]/h3/span[2]").click()
                driver.find_element_by_link_text("Export").click()        
                time.sleep(2)
                driver.find_element_by_link_text("Export Course Content").click()
                time.sleep(2)
                driver.find_element_by_link_text("Download Exported Course").click()
                time.sleep(5)
                self.rename_lab_folder(lab_name, path)
            return test_export_lab


        for lab in l:
            test_name = "test_%s" % lab['lab_name']
            print test_name
            dict[test_name] = gen_test(lab['lab_name'], lab['lab_url'], lab['directory_path_to_download'])
        return type.__new__(mcs, name, bases, dict)


class TestSequence(unittest.TestCase):
    def setUp(self):
        self.caps = webdriver.DesiredCapabilities.FIREFOX
        self.caps["marionette"] = False
#        self.driver = webdriver.Firefox(capabilities=self.caps)

        profile = webdriver.FirefoxProfile()
        profile.set_preference('browser.download.folderList', 1)
        profile.set_preference('browser.download.manager.showWhenStarting', False)
        profile.set_preference("browser.download.manager.showAlertOnComplete", False)
        profile.set_preference('browser.download.dir', '/home/sravanthi/projects/')
        profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/x-tgz')
        profile.set_preference('browser.download.manager.showWhenStarting', False)
        profile.set_preference("browser.download.panel.shown", False);

        self.driver = webdriver.Firefox(capabilities=self.caps, firefox_profile=profile)
        self.driver.implicitly_wait(30)
        self.base_url = "http://mybox.vlabs.ac.in:18010"
        self.verificationErrors = []
        self.accept_next_alert = True

    def rename_lab_folder(self, lab_name, path):
        print "============rename exported edx lab folder=========" 
        new_lab_name=lab_name+'-edx'+'.tar.gz'
        for file in os.listdir(path):
            if file.endswith(".tar.gz"):
                os.rename(os.path.join(path, file), os.path.join(path, new_lab_name))

    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)


    __metaclass__ = TestExportLab

if __name__ == '__main__':
    unittest.main()

#+END_SRC
